// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/remote.proto

package remote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RemoteCredentialsManager_GetCredential_FullMethodName      = "/remote.RemoteCredentialsManager/GetCredential"
	RemoteCredentialsManager_SetCredential_FullMethodName      = "/remote.RemoteCredentialsManager/SetCredential"
	RemoteCredentialsManager_ListCredentials_FullMethodName    = "/remote.RemoteCredentialsManager/ListCredentials"
	RemoteCredentialsManager_DeleteCredential_FullMethodName   = "/remote.RemoteCredentialsManager/DeleteCredential"
	RemoteCredentialsManager_DropAllCredentials_FullMethodName = "/remote.RemoteCredentialsManager/DropAllCredentials"
	RemoteCredentialsManager_CreateUser_FullMethodName         = "/remote.RemoteCredentialsManager/CreateUser"
	RemoteCredentialsManager_UpdateUser_FullMethodName         = "/remote.RemoteCredentialsManager/UpdateUser"
	RemoteCredentialsManager_DeleteUser_FullMethodName         = "/remote.RemoteCredentialsManager/DeleteUser"
	RemoteCredentialsManager_ListUsers_FullMethodName          = "/remote.RemoteCredentialsManager/ListUsers"
	RemoteCredentialsManager_AddRole_FullMethodName            = "/remote.RemoteCredentialsManager/AddRole"
	RemoteCredentialsManager_DeleteRole_FullMethodName         = "/remote.RemoteCredentialsManager/DeleteRole"
	RemoteCredentialsManager_ListRoles_FullMethodName          = "/remote.RemoteCredentialsManager/ListRoles"
)

// RemoteCredentialsManagerClient is the client API for RemoteCredentialsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteCredentialsManagerClient interface {
	// Retrieves a single credential based on alias
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error)
	// Adds a new credential to the remote store
	SetCredential(ctx context.Context, in *SetCredentialRequest, opts ...grpc.CallOption) (*SetCredentialResponse, error)
	// Lists all credentials stored remotely
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	// Removes a credential from the remote store
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error)
	// Drops all credentials from the remote store
	DropAllCredentials(ctx context.Context, in *DropAllCredentialsRequest, opts ...grpc.CallOption) (*DropAllCredentialsResponse, error)
	// Registers a new remote repository user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Deletes a remote repository user
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Lists all remote repository users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Adds a new access role
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error)
	// Deletes an access role
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// Lists all access roles
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
}

type remoteCredentialsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteCredentialsManagerClient(cc grpc.ClientConnInterface) RemoteCredentialsManagerClient {
	return &remoteCredentialsManagerClient{cc}
}

func (c *remoteCredentialsManagerClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error) {
	out := new(Credential)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_GetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) SetCredential(ctx context.Context, in *SetCredentialRequest, opts ...grpc.CallOption) (*SetCredentialResponse, error) {
	out := new(SetCredentialResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_SetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_ListCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error) {
	out := new(DeleteCredentialResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) DropAllCredentials(ctx context.Context, in *DropAllCredentialsRequest, opts ...grpc.CallOption) (*DropAllCredentialsResponse, error) {
	out := new(DropAllCredentialsResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_DropAllCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error) {
	out := new(AddRoleResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_AddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCredentialsManagerClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, RemoteCredentialsManager_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteCredentialsManagerServer is the server API for RemoteCredentialsManager service.
// All implementations must embed UnimplementedRemoteCredentialsManagerServer
// for forward compatibility
type RemoteCredentialsManagerServer interface {
	// Retrieves a single credential based on alias
	GetCredential(context.Context, *GetCredentialRequest) (*Credential, error)
	// Adds a new credential to the remote store
	SetCredential(context.Context, *SetCredentialRequest) (*SetCredentialResponse, error)
	// Lists all credentials stored remotely
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	// Removes a credential from the remote store
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error)
	// Drops all credentials from the remote store
	DropAllCredentials(context.Context, *DropAllCredentialsRequest) (*DropAllCredentialsResponse, error)
	// Registers a new remote repository user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Deletes a remote repository user
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Lists all remote repository users
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Adds a new access role
	AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error)
	// Deletes an access role
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// Lists all access roles
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	mustEmbedUnimplementedRemoteCredentialsManagerServer()
}

// UnimplementedRemoteCredentialsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteCredentialsManagerServer struct {
}

func (UnimplementedRemoteCredentialsManagerServer) GetCredential(context.Context, *GetCredentialRequest) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) SetCredential(context.Context, *SetCredentialRequest) (*SetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredential not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) DropAllCredentials(context.Context, *DropAllCredentialsRequest) (*DropAllCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAllCredentials not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedRemoteCredentialsManagerServer) mustEmbedUnimplementedRemoteCredentialsManagerServer() {
}

// UnsafeRemoteCredentialsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteCredentialsManagerServer will
// result in compilation errors.
type UnsafeRemoteCredentialsManagerServer interface {
	mustEmbedUnimplementedRemoteCredentialsManagerServer()
}

func RegisterRemoteCredentialsManagerServer(s grpc.ServiceRegistrar, srv RemoteCredentialsManagerServer) {
	s.RegisterService(&RemoteCredentialsManager_ServiceDesc, srv)
}

func _RemoteCredentialsManager_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_SetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).SetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_SetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).SetCredential(ctx, req.(*SetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_ListCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_DropAllCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropAllCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).DropAllCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_DropAllCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).DropAllCredentials(ctx, req.(*DropAllCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCredentialsManager_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCredentialsManagerServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteCredentialsManager_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCredentialsManagerServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteCredentialsManager_ServiceDesc is the grpc.ServiceDesc for RemoteCredentialsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteCredentialsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.RemoteCredentialsManager",
	HandlerType: (*RemoteCredentialsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredential",
			Handler:    _RemoteCredentialsManager_GetCredential_Handler,
		},
		{
			MethodName: "SetCredential",
			Handler:    _RemoteCredentialsManager_SetCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _RemoteCredentialsManager_ListCredentials_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _RemoteCredentialsManager_DeleteCredential_Handler,
		},
		{
			MethodName: "DropAllCredentials",
			Handler:    _RemoteCredentialsManager_DropAllCredentials_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _RemoteCredentialsManager_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _RemoteCredentialsManager_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _RemoteCredentialsManager_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _RemoteCredentialsManager_ListUsers_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _RemoteCredentialsManager_AddRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RemoteCredentialsManager_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RemoteCredentialsManager_ListRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/remote.proto",
}
